Index: app/src/main/java/com/example/expirease/fragment/HomeFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.expirease.fragment\r\n\r\nimport android.app.AlertDialog\r\nimport android.app.DatePickerDialog\r\nimport android.app.Dialog\r\nimport android.graphics.Color\r\nimport android.graphics.drawable.ColorDrawable\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.*\r\nimport android.widget.*\r\nimport androidx.appcompat.widget.SearchView\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.fragment.app.activityViewModels\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.example.expirease.R\r\nimport com.example.expirease.data.Category\r\nimport com.example.expirease.data.CategoryManager\r\nimport com.example.expirease.data.Item\r\nimport com.example.expirease.data.ItemStatus\r\nimport com.example.expirease.helper.CategoryRecyclerViewAdapter\r\nimport com.example.expirease.helper.ItemRecyclerViewAdapter\r\nimport com.example.expirease.helper.OnItemUpdatedListener\r\nimport com.example.expirease.viewmodel.SharedItemViewModel\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\n\r\nclass HomeFragment : Fragment() {\r\n\r\n    private lateinit var categoryRecyclerView: RecyclerView\r\n    private lateinit var categoryAdapter: CategoryRecyclerViewAdapter\r\n    private val sharedItemViewModel: SharedItemViewModel by activityViewModels()\r\n\r\n    private lateinit var itemAdapter: ItemRecyclerViewAdapter\r\n    private lateinit var filteredList: MutableList<Item>\r\n    private lateinit var listOfItems: MutableList<Item>\r\n\r\n    private lateinit var searchView: SearchView\r\n    private val categoryList = CategoryManager.getCategories().toMutableList()\r\n\r\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r\n        listOfItems = mutableListOf()\r\n        filteredList = mutableListOf()\r\n\r\n        val view = inflater.inflate(R.layout.fragment_home, container, false)\r\n\r\n        setupRecyclerView(view)\r\n        setupSearchView(view)\r\n        setupAddButton(view)\r\n        setupCategoryRecyclerView(view)\r\n\r\n        return view\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        categoryRecyclerView = view.findViewById(R.id.category_recyclerview)\r\n\r\n        sharedItemViewModel.allItems.observe(viewLifecycleOwner) { updatedList ->\r\n            val activeItems = updatedList.filter { it.status == ItemStatus.ACTIVE || it.status == ItemStatus.EXPIRED }\r\n            val sortedItems = activeItems.sortedBy { it.expiryDate }\r\n\r\n            listOfItems.clear()\r\n            listOfItems.addAll(activeItems)\r\n\r\n            filteredList.clear()\r\n            filteredList.addAll(sortedItems)\r\n\r\n            itemAdapter.notifyDataSetChanged()\r\n            updateCategoryItemCounts()\r\n            categoryAdapter.notifyDataSetChanged()\r\n\r\n            updateUI(sortedItems)\r\n        }\r\n\r\n    }\r\n\r\n    private fun setupRecyclerView(view: View) {\r\n        val itemRecyclerView = view.findViewById<RecyclerView>(R.id.item_recyclerview)\r\n        itemRecyclerView.layoutManager = LinearLayoutManager(requireContext())\r\n\r\n        itemAdapter = ItemRecyclerViewAdapter(\r\n            filteredList,\r\n            onClick = { item -> openEditItemBottomSheet(item) },\r\n            onLongClick = { item -> showItemOptionsDialog(item) }\r\n        )\r\n\r\n        itemRecyclerView.adapter = itemAdapter\r\n    }\r\n\r\n    private fun updateCategoryItemCounts() {\r\n        // Reset all category counts to 0\r\n        categoryList.forEach { it.itemCount = 0 }\r\n\r\n        // Count items for each category\r\n        listOfItems.forEach { item ->\r\n            val category = categoryList.find { it.id.equals(item.categoryId, ignoreCase = true) }\r\n\r\n            if (category != null) {\r\n                category.itemCount++\r\n            } else {\r\n                // Handle invalid category\r\n                println(\"CategoryWarning: Item '${item.name}' has an invalid category '${item.categoryId}'\")\r\n            }\r\n        }\r\n\r\n        // Update the adapter to reflect changes\r\n        categoryAdapter.notifyDataSetChanged()\r\n    }\r\n\r\n    private fun updateUI(itemList: List<Item>) {\r\n        val textViewNoItems = view?.findViewById<TextView>(R.id.textViewNoItems)\r\n        val recyclerViewItems = view?.findViewById<RecyclerView>(R.id.item_recyclerview)\r\n\r\n        if (itemList.isEmpty()) {\r\n            textViewNoItems?.visibility = View.VISIBLE\r\n            recyclerViewItems?.visibility = View.GONE\r\n        } else {\r\n            textViewNoItems?.visibility = View.GONE\r\n            recyclerViewItems?.visibility = View.VISIBLE\r\n        }\r\n    }\r\n\r\n    private fun setupSearchView(view: View) {\r\n        searchView = view.findViewById(R.id.search_bar)\r\n        searchView.setOnQueryTextListener(object : SearchView.OnQueryTextListener {\r\n            override fun onQueryTextSubmit(query: String?) = false\r\n            override fun onQueryTextChange(newText: String?) : Boolean {\r\n                filterList(newText.orEmpty())\r\n                return true\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun setupAddButton(view: View) {\r\n        val buttonAdd = view.findViewById<ImageView>(R.id.add_button)\r\n        buttonAdd.setOnClickListener {\r\n            showAddItemDialog()\r\n            Toast.makeText(requireContext(), \"Add button clicked\", Toast.LENGTH_SHORT).show()\r\n        }\r\n    }\r\n\r\n    private fun setupCategoryRecyclerView(view: View) {\r\n        categoryRecyclerView = view.findViewById(R.id.category_recyclerview)\r\n        categoryRecyclerView.layoutManager = LinearLayoutManager(requireContext(), RecyclerView.HORIZONTAL, false)\r\n\r\n        categoryAdapter = CategoryRecyclerViewAdapter(categoryList) { category ->\r\n            Toast.makeText(requireContext(), \"Clicked category: ${category.displayName}\", Toast.LENGTH_SHORT).show()\r\n            filterItems(category)\r\n        }\r\n\r\n        categoryRecyclerView.adapter = categoryAdapter\r\n    }\r\n\r\n    private fun filterList(query: String) {\r\n        filteredList.clear()\r\n        if (query.isEmpty()) {\r\n            filteredList.addAll(listOfItems)\r\n        } else {\r\n            val lowerQuery = query.lowercase()\r\n            filteredList.addAll(listOfItems.filter { it.name.lowercase().contains(lowerQuery) })\r\n        }\r\n        itemAdapter.notifyDataSetChanged()\r\n    }\r\n\r\n    private fun showAddItemDialog() {\r\n        val dialogView = LayoutInflater.from(requireContext()).inflate(R.layout.dialog_add_item, null)\r\n        val editItemName = dialogView.findViewById<EditText>(R.id.edit_item_name)\r\n        val editItemQuantity = dialogView.findViewById<EditText>(R.id.edit_item_quantity)\r\n        val btnIncrease = dialogView.findViewById<Button>(R.id.btn_increase)\r\n        val btnDecrease = dialogView.findViewById<Button>(R.id.btn_decrease)\r\n        val tvExpiry = dialogView.findViewById<TextView>(R.id.tv_expiry)\r\n        val btnPickDate = dialogView.findViewById<ImageButton>(R.id.btn_pick_date)\r\n        val spinnerCategory = dialogView.findViewById<Spinner>(R.id.spinner_category)\r\n\r\n        var selectedExpiryDate: Long = System.currentTimeMillis()\r\n\r\n        val dialog = Dialog(requireContext()).apply {\r\n            requestWindowFeature(Window.FEATURE_NO_TITLE)\r\n            setContentView(dialogView)\r\n            window?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))\r\n            setCancelable(true)\r\n        }\r\n\r\n        val spinnerAdapter = ArrayAdapter(\r\n            requireContext(),\r\n            android.R.layout.simple_spinner_dropdown_item,\r\n            categoryList.map { it.displayName }\r\n        )\r\n        spinnerCategory.adapter = spinnerAdapter\r\n\r\n        btnIncrease.setOnClickListener {\r\n            val current = editItemQuantity.text.toString().toIntOrNull() ?: 1\r\n            editItemQuantity.setText((current + 1).toString())\r\n        }\r\n\r\n        btnDecrease.setOnClickListener {\r\n            val current = editItemQuantity.text.toString().toIntOrNull() ?: 1\r\n            if (current > 1) {\r\n                editItemQuantity.setText((current - 1).toString())\r\n            }\r\n        }\r\n\r\n        btnPickDate.setOnClickListener {\r\n            val calendar = Calendar.getInstance()\r\n            DatePickerDialog(requireContext(), { _, year, month, dayOfMonth ->\r\n                calendar.set(year, month, dayOfMonth)\r\n                selectedExpiryDate = calendar.timeInMillis\r\n                val displayFormat = SimpleDateFormat(\"MMM dd, yyyy\", Locale.getDefault())\r\n                tvExpiry.text = displayFormat.format(Date(selectedExpiryDate))\r\n            }, calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH), calendar.get(Calendar.DAY_OF_MONTH)).show()\r\n        }\r\n\r\n        dialogView.findViewById<Button>(R.id.btn_add_item).setOnClickListener {\r\n            val name = editItemName.text.toString()\r\n            val quantity = editItemQuantity.text.toString().toIntOrNull() ?: 1\r\n            val selectedCategoryName = spinnerCategory.selectedItem.toString()\r\n            val selectedCategory = categoryList.find { it.displayName == selectedCategoryName }\r\n\r\n            if (name.isNotEmpty() && selectedCategory != null) {\r\n                val imageResId = getImageForCategory(selectedCategory)\r\n                addItem(name, quantity, selectedExpiryDate, selectedCategory, imageResId)\r\n                dialog.dismiss()\r\n            }\r\n        }\r\n\r\n        dialogView.findViewById<Button>(R.id.btn_cancel).setOnClickListener {\r\n            dialog.dismiss()\r\n        }\r\n\r\n        dialog.show()\r\n    }\r\n\r\n    private fun getImageForCategory(category: Category): Int {\r\n        return when (category.displayName.lowercase()) {\r\n            \"fruits\" -> R.drawable.img_product_fruit\r\n            \"vegetables\" -> R.drawable.img_product_vegetable\r\n            \"dairy\" -> R.drawable.img_product_dairy\r\n            \"meat\" -> R.drawable.img_product_meat\r\n            \"beverages\" -> R.drawable.img_product_drink\r\n            else -> R.drawable.img_product_others\r\n        }\r\n    }\r\n\r\n    private fun addItem(name: String, quantity: Int, expiryDate: Long, selectedCategory: Category, img: Int) {\r\n        val newItem = Item(name, quantity, ItemStatus.ACTIVE, expiryDate, selectedCategory.toString(), img)\r\n        val currentTime = System.currentTimeMillis()\r\n        newItem.status = if (expiryDate < currentTime) ItemStatus.EXPIRED else ItemStatus.ACTIVE\r\n\r\n        sharedItemViewModel.addItem(newItem)\r\n        updateCategoryItemCounts()\r\n\r\n    }\r\n\r\n    private fun filterItems(category: Category) {\r\n        filteredList.clear()\r\n        filteredList.addAll(listOfItems.filter { item ->\r\n            item.categoryId.equals(category.displayName, ignoreCase = true)\r\n        })\r\n        itemAdapter.notifyDataSetChanged()\r\n        updateUI(filteredList)\r\n    }\r\n\r\n    private fun openEditItemBottomSheet(item: Item) {\r\n        val bottomSheet = EditItemBottomSheet()\r\n        val bundle = Bundle().apply {\r\n            putInt(\"photo\", item.photoResource)\r\n            putString(\"name\", item.name)\r\n            putInt(\"quantity\", item.quantity)\r\n            putLong(\"expiryDate\", item.expiryDate)\r\n            putString(\"category\", item.categoryId)\r\n        }\r\n        bottomSheet.arguments = bundle\r\n\r\n        bottomSheet.onItemUpdatedListener = object : OnItemUpdatedListener {\r\n            override fun onItemUpdated(name: String, quantity: Int, expiryDate: Long, category: String) {\r\n                item.name = name\r\n                item.quantity = quantity\r\n                item.expiryDate = expiryDate\r\n                CategoryManager.getCategories().find { it.displayName.equals(category, ignoreCase = true) }?.let {\r\n                    item.categoryId = it.toString()\r\n                }\r\n                itemAdapter.notifyDataSetChanged()\r\n            }\r\n        }\r\n\r\n        bottomSheet.show(parentFragmentManager, \"EditItemBottomSheet\")\r\n    }\r\n\r\n    private fun showItemOptionsDialog(item: Item): Boolean {\r\n        AlertDialog.Builder(requireContext())\r\n            .setTitle(item.name)\r\n            .setItems(arrayOf(\"Consume\", \"Delete\")) { _, which ->\r\n                when (which) {\r\n                    0 -> consumeItem(item)\r\n                    1 -> deleteItem(item)\r\n                }\r\n            }\r\n            .setNegativeButton(\"Cancel\", null)\r\n            .show()\r\n        return true\r\n    }\r\n\r\n    private fun consumeItem(item: Item) {\r\n        if (item.quantity > 1) {\r\n            item.quantity--\r\n            item.status = ItemStatus.ACTIVE\r\n            sharedItemViewModel.updateItem(item)\r\n        } else {\r\n            item.status = ItemStatus.CONSUMED\r\n            sharedItemViewModel.updateItem(item)\r\n            listOfItems.remove(item)\r\n            filteredList.remove(item)\r\n        }\r\n        itemAdapter.notifyDataSetChanged()\r\n        Toast.makeText(requireContext(), \"${item.name} consumed!\", Toast.LENGTH_SHORT).show()\r\n        updateCategoryItemCounts()\r\n    }\r\n\r\n    private fun deleteItem(item: Item) {\r\n        item.status = ItemStatus.DELETED\r\n        sharedItemViewModel.updateItem(item)\r\n        listOfItems.remove(item)\r\n        filteredList.remove(item)\r\n        itemAdapter.notifyDataSetChanged()\r\n        Toast.makeText(requireContext(), \"${item.name} deleted!\", Toast.LENGTH_SHORT).show()\r\n        updateCategoryItemCounts()\r\n    }\r\n\r\n    private fun updateCategoryCounts() {\r\n        // Reset all category item counts\r\n        categoryList.forEach { it.itemCount = 0 }\r\n\r\n        // Count items per category\r\n        listOfItems.forEach { item ->\r\n            categoryList.find { it.id == item.categoryId }?.incrementItemCount()\r\n        }\r\n\r\n        // Notify the adapter that the data changed\r\n        categoryAdapter.notifyDataSetChanged()\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/expirease/fragment/HomeFragment.kt b/app/src/main/java/com/example/expirease/fragment/HomeFragment.kt
--- a/app/src/main/java/com/example/expirease/fragment/HomeFragment.kt	(revision cb5454fce8fd56e161eaa1f3ce8a8ce61c7a1193)
+++ b/app/src/main/java/com/example/expirease/fragment/HomeFragment.kt	(date 1746090722865)
@@ -6,7 +6,6 @@
 import android.graphics.Color
 import android.graphics.drawable.ColorDrawable
 import android.os.Bundle
-import android.util.Log
 import android.view.*
 import android.widget.*
 import androidx.appcompat.widget.SearchView
@@ -235,12 +234,12 @@
 
     private fun getImageForCategory(category: Category): Int {
         return when (category.displayName.lowercase()) {
-            "fruits" -> R.drawable.img_product_fruit
-            "vegetables" -> R.drawable.img_product_vegetable
-            "dairy" -> R.drawable.img_product_dairy
-            "meat" -> R.drawable.img_product_meat
-            "beverages" -> R.drawable.img_product_drink
-            else -> R.drawable.img_product_others
+            "fruits" -> R.drawable.img_product_banana
+            "vegetables" -> R.drawable.img_category_vegetable
+            "dairy" -> R.drawable.img_category_dairy
+            "meat" -> R.drawable.img_category_meat
+            "beverages" -> R.drawable.img_category_beverage
+            else -> R.drawable.img_category_others
         }
     }
 
Index: .idea/deploymentTargetDropDown.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"deploymentTargetDropDown\">\r\n    <value>\r\n      <entry key=\"app\">\r\n        <State>\r\n          <runningDeviceTargetSelectedWithDropDown>\r\n            <Target>\r\n              <type value=\"RUNNING_DEVICE_TARGET\" />\r\n              <deviceKey>\r\n                <Key>\r\n                  <type value=\"SERIAL_NUMBER\" />\r\n                  <value value=\"8b398531\" />\r\n                </Key>\r\n              </deviceKey>\r\n            </Target>\r\n          </runningDeviceTargetSelectedWithDropDown>\r\n          <timeTargetWasSelectedWithDropDown value=\"2025-05-01T04:16:31.225735900Z\" />\r\n        </State>\r\n      </entry>\r\n    </value>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
--- a/.idea/deploymentTargetDropDown.xml	(revision cb5454fce8fd56e161eaa1f3ce8a8ce61c7a1193)
+++ b/.idea/deploymentTargetDropDown.xml	(date 1746086806639)
@@ -3,20 +3,7 @@
   <component name="deploymentTargetDropDown">
     <value>
       <entry key="app">
-        <State>
-          <runningDeviceTargetSelectedWithDropDown>
-            <Target>
-              <type value="RUNNING_DEVICE_TARGET" />
-              <deviceKey>
-                <Key>
-                  <type value="SERIAL_NUMBER" />
-                  <value value="8b398531" />
-                </Key>
-              </deviceKey>
-            </Target>
-          </runningDeviceTargetSelectedWithDropDown>
-          <timeTargetWasSelectedWithDropDown value="2025-05-01T04:16:31.225735900Z" />
-        </State>
+        <State />
       </entry>
     </value>
   </component>
